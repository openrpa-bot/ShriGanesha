/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal, drupalSettings, CKEDITOR) {
  function parseAttributes(editor, element) {
    var parsedAttributes = {};

    var domElement = element.$;
    var attribute = void 0;
    var attributeName = void 0;
    for (var attrIndex = 0; attrIndex < domElement.attributes.length; attrIndex++) {
      attribute = domElement.attributes.item(attrIndex);
      attributeName = attribute.nodeName.toLowerCase();

      if (attributeName.indexOf('data-cke-') === 0) {
        continue;
      }

      parsedAttributes[attributeName] = element.data('cke-saved-' + attributeName) || attribute.nodeValue;
    }

    if (parsedAttributes.class) {
      parsedAttributes.class = CKEDITOR.tools.trim(parsedAttributes.class.replace(/cke_\S+/, ''));
    }

    return parsedAttributes;
  }

  function getAttributes(editor, data) {
    var set = {};
    Object.keys(data || {}).forEach(function (attributeName) {
      set[attributeName] = data[attributeName];
    });

    set['data-cke-saved-href'] = set.href;

    var removed = {};
    Object.keys(set).forEach(function (s) {
      delete removed[s];
    });

    return {
      set: set,
      removed: CKEDITOR.tools.objectKeys(removed)
    };
  }

  function getSelectedLink(editor) {
    var selection = editor.getSelection();
    var selectedElement = selection.getSelectedElement();
    if (selectedElement && selectedElement.is('a')) {
      return selectedElement;
    }

    var range = selection.getRanges(true)[0];

    if (range) {
      range.shrink(CKEDITOR.SHRINK_TEXT);
      return editor.elementPath(range.getCommonAncestor()).contains('a', 1);
    }
    return null;
  }

  CKEDITOR.plugins.add('tooltip_ckeditor', {
    icons: 'tooltip',
    hidpi: false,

    init: function init(editor) {
      editor.addCommand('tooltip_ckeditor', {
        allowedContent: {
          a: {
            attributes: {
              '!title': true,
              '!href': true,
              '!class': true,
            },
            classes: {}
          }
        },
        requiredContent: new CKEDITOR.style({
          element: 'a',
          attributes: {
            title: '',
            href: '#',
            class: 'tooltip',
          }
        }),
        modes: { wysiwyg: 1 },
        canUndo: true,
        exec: function exec(editor) {
          var drupalImageUtils = CKEDITOR.plugins.drupalimage;
          var focusedImageWidget = drupalImageUtils && drupalImageUtils.getFocusedWidget(editor);
          var linkElement = getSelectedLink(editor);

          var existingValues = {};
          if (linkElement && linkElement.$) {
            existingValues = parseAttributes(editor, linkElement);
          } else if (focusedImageWidget && focusedImageWidget.data.link) {
              existingValues = CKEDITOR.tools.clone(focusedImageWidget.data.link);
            }
          var saveCallback = function saveCallback(returnValues) {
            if (focusedImageWidget) {
              focusedImageWidget.setData('tooltip', CKEDITOR.tools.extend(returnValues.attributes, focusedImageWidget.data.link));
              editor.fire('saveSnapshot');
              return;
            }

            editor.fire('saveSnapshot');
            if (!linkElement && returnValues.attributes.title) {
              var selection = editor.getSelection();
              var range = selection.getRanges(1)[0];

              var style = new CKEDITOR.style({
                element: 'a',
                attributes: returnValues.attributes
              });
              console.log(style);
              style.type = CKEDITOR.STYLE_INLINE;
              style.applyToRange(range);
              range.select();

              linkElement = getSelectedLink(editor);
            } else if (linkElement) {
                Object.keys(returnValues.attributes || {}).forEach(function (attrName) {
                  if (returnValues.attributes[attrName].length > 0) {
                    var value = returnValues.attributes[attrName];
                    linkElement.data('cke-saved-' + attrName, value);
                    linkElement.setAttribute(attrName, value);
                  } else {
                      linkElement.removeAttribute(attrName);
                    }
                });
              }

            editor.fire('saveSnapshot');
          };

          var dialogSettings = {
            title: linkElement ? editor.config.tooltipCkeditor_dialogTitleAdd : editor.config.tooltipCkeditor_dialogTitleAdd,
            dialogClass: 'editor-tooltip-dialog'
          };
          Drupal.ckeditor.openDialog(editor, Drupal.url('plugin/dialog/tooltip/' + editor.config.drupal.format), existingValues, saveCallback, dialogSettings);
        }
      });
      // ALT + T
      editor.setKeystroke(CKEDITOR.ALT + 84, 'tooltip_ckeditor');

      if (editor.ui.addButton) {
        editor.ui.addButton('Tooltip', {
          label: Drupal.t('Tooltip'),
          command: 'tooltip_ckeditor'
        });
      }

      editor.on('doubleclick', function (evt) {
        var element = getSelectedLink(editor) || evt.data.element;

        if (!element.isReadOnly()) {
          if (element.is('a')) {
            editor.getSelection().selectElement(element);
            editor.getCommand('tooltip_ckeditor').exec();
          }
        }
      });

      if (editor.addMenuItems) {
        editor.addMenuItems({
          link: {
            label: Drupal.t('Edit Text'),
            command: 'tooltip',
            group: 'tooltip',
            order: 1
          },
        });
      }

      if (editor.contextMenu) {
        editor.contextMenu.addListener(function (element, selection) {
          if (!element || element.isReadOnly()) {
            return null;
          }
          var anchor = getSelectedLink(editor);
          if (!anchor) {
            return null;
          }

          var menu = {};
          if (anchor.getAttribute('href') && anchor.getChildCount()) {
            menu = {
              link: CKEDITOR.TRISTATE_OFF,
            };
          }
          return menu;
        });
      }
    }
  });

  CKEDITOR.plugins.tooltip_ckeditor = {
    parseLinkAttributes: parseAttributes,
    getLinkAttributes: getAttributes
  };
})(jQuery, Drupal, drupalSettings, CKEDITOR);