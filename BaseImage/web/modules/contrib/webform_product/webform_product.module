<?php

/**
 * @file
 * Hooks and alters for webform_product.
 */

use Drupal\Component\Plugin\Factory\DefaultFactory;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\webform\WebformInterface;
use Drupal\webform_product\Plugin\WebformHandler\WebformProductWebformHandler;
use Drupal\webform_product\WebFormProductFormHelper;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function webform_product_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the webform_product module.
    case 'help.page.webform_product':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Webform Product can create a Commerce order from any Webform submission.') . '</p>';
      $output .= '<h3>' . t('How to configure') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t('Create a webform') . '</li>';
      $output .= '<li>' . t('Add elements') . '</li>';
      $output .= '<ol>';
      $output .= '<li>' . t('Order ID (Number)') . '</li>';
      $output .= '<li>' . t('Order URL (URL)') . '</li>';
      $output .= '<li>' . t('Order status (Text field)') . '</li>';
      $output .= '<li>' . t('Product (Select)') . '</li>';
      $output .= '</ol>';
      $output .= '<li>' . t("Set permissions for 'Order *'-fields to be visible only for administrators.") . '</li>';
      $output .= '<li>' . t('Setup the values of the element Product') . '</li>';
      $output .= '<ol>';
      $output .= '<li>' . t('Use the option value and price to simulate product variations') . '</li>';
      $output .= '<li>' . t('Use the Price inside Element settings below to create multiple products with one price') . '</li>';
      $output .= '</ol>';
      $output .= '<li>' . t('Setup the Webform Product Handler and map the fields (Payment status, Order ID, Order URL)') . '</li>';
      $output .= '<li>' . t("Create a commerce link-field (no title) in the Order Type selected at the handler called 'field_link_order_origin'. ( admin/commerce/config/order-types )") . '</li>';
      $output .= '<li>' . t('Save the webform and create a submission') . '</li>';
      $output .= '</ol>';
      $output .= '<h3>' . t('Known issues') . '</h3>';
      $output .= '<p>' . t('Webform Product currently only works well with off-site payment providers (for example: saferpay or paypal). A workaround could be to select a different "Checkout step" for the Webform Product Handler. "Order information" or "Review" may get in early enough in the process.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_element_info_alter().
 */
function webform_product_element_info_alter(array &$info) {
  $definitions = \Drupal::service('plugin.manager.webform_product')->getDefinitions();
  foreach ($definitions as $id => $definition) {
    /** @var \Drupal\Component\Plugin\PluginManagerInterface $pluginManager */
    if (isset($info[$id])) {
      $info[$id]['#process'][] = [
        DefaultFactory::getPluginClass($id, $definition),
        'process',
      ];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function webform_product_form_webform_ui_element_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['properties']['element']['#process'][] = [
    WebFormProductFormHelper::class,
    'processElementForm',
  ];
}

/**
 * Implements hook_theme().
 */
function webform_product_theme() {
  return [
    'webform_handler_webform_product_summary' => [
      'variables' => ['settings' => NULL, 'handler' => NULL],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for commerce_checkout_flow_multistep_default.
 *
 * @todo Make it work for onsite payments.
 */
function webform_product_form_commerce_checkout_flow_multistep_default_alter(&$form, FormStateInterface $form_state, $form_id) {
  $offsite = NULL;
  $payment = NULL;
  if (isset($form['payment_process']['offsite_payment'])) {
    $offsite = &$form['payment_process']['offsite_payment'];

    /** @var \Drupal\commerce_payment\Plugin\Commerce\InlineForm\PaymentGatewayForm $paymentGatewayForm */
    $paymentGatewayForm = $offsite['#inline_form'];

    /** @var \Drupal\commerce_payment\Entity\PaymentInterface $payment */
    $payment = $paymentGatewayForm->getEntity();
  }

  if (!$offsite || !$payment) {
    return;
  }

  $order = $payment->getOrder();
  if (!$order || !$order->hasField(WebformProductWebformHandler::FIELD_LINK_ORDER_ORIGIN)) {
    return;
  }

  // Load the webform submission from the saved link on the order.
  $source_uri = $payment->getOrder()->get(WebformProductWebformHandler::FIELD_LINK_ORDER_ORIGIN)->getValue();
  $params = Url::fromUri($source_uri[0]['uri'])->getRouteParameters();

  /** @var \Drupal\webform\WebformSubmissionInterface $webformSubmission */
  $webformSubmission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($params['webform_submission']);

  $options = [
    'query' => [
      'submission' => $webformSubmission->getToken(),
    ],
    'absolute' => TRUE,
  ];

  $webform_id = $webformSubmission->getWebform()->id();

  $offsite['#return_url'] = Url::fromRoute('webform_product.payment.completed', [
    'webform' => $webform_id,
    'order' => $order->id(),
  ], $options)->toString();
  $offsite['#cancel_url'] = Url::fromRoute('webform_product.payment.canceled', [
    'webform' => $webform_id,
    'order' => $order->id(),
  ], $options)->toString();
  $offsite['#exception_url'] = Url::fromRoute('webform_product.payment.exception', [
    'webform' => $webform_id,
    'order' => $order->id(),
  ], $options)->toString();
}

/**
 * Implements hook_form_FORM_ID_alter() for webform_settings_confirmation_form.
 *
 * Remove not implemented confirmation types,
 * if the webform_product handler is used.
 */
function webform_product_form_webform_settings_confirmation_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\webform\WebformInterface $webform */
  $webform = $form_state->getFormObject()->getEntity();

  $handlers = $webform->getHandlers('webform_product', TRUE);
  if ($handlers->count() == 0) {
    return;
  }

  foreach ($form['confirmation_type']['confirmation_type']['#options'] as $key => $option) {
    switch ($key) {
      case WebformInterface::CONFIRMATION_URL:
      case WebformInterface::CONFIRMATION_URL_MESSAGE:
        break;

      default:
        unset($form['confirmation_type']['confirmation_type']['#options'][$key]);
    }
  }
}
